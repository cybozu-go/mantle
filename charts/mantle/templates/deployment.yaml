apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mantle.fullname" . }}-controller
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mantle.labels" . | nindent 4 }}
    {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "mantle.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "mantle.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mantle.serviceAccountName" . }}
      securityContext:
        runAsNonRoot: true
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - "ALL"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{- with .Values.image.pullPolicy }}
          imagePullPolicy: {{ . }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          command:
            - /manager
          args:
            - controller
            - --leader-elect
            - --role={{ .Values.controller.role }}
            {{- with .Values.controller.mantleServiceEndpoint }}
            - --mantle-service-endpoint={{ . }}
            {{- end }}
            {{- with .Values.controller.overwriteMBCSchedule }}
            - --overwrite-mbc-schedule={{ . }}
            {{- end }}
            {{- with .Values.controller.objectStorageBucketName }}
            - --object-storage-bucket-name={{ . }}
            {{- end }}
            {{- with .Values.controller.objectStorageEndpoint }}
            - --object-storage-endpoint={{ . }}
            {{- end }}
            {{- with .Values.controller.envSecret }}
            - --env-secret={{ . }}
            {{- end }}
            {{- with .Values.controller.caCertConfigMap }}
            - --ca-cert-configmap={{ . }}
            {{- end }}
            {{- with .Values.controller.caCertKey }}
            - --ca-cert-key={{ . }}
            {{- end }}
            {{- with .Values.controller.exportDataStorageClass }}
            - --export-data-storage-class={{ . }}
            {{- end }}
            {{- with .Values.controller.gcInterval }}
            - --gc-interval={{ . }}
            {{- end }}
            {{- with .Values.controller.httpProxy }}
            - --http-proxy={{ . }}
            {{- end }}
            {{- with .Values.controller.httpsProxy }}
            - --https-proxy={{ . }}
            {{- end }}
            {{- with .Values.controller.noProxy }}
            - --no-proxy={{ . }}
            {{- end }}
            {{- with .Values.controller.backupTransferPartSize }}
            - --backup-transfer-part-size={{ . }}
            {{- end }}

            {{- if eq .Values.controller.role "primary" }}
            - --replication-tls-client-cert-path=/mnt/replication-tls-client-cert/tls.crt
            - --replication-tls-client-key-path=/mnt/replication-tls-client-cert/tls.key
            - --replication-tls-server-ca-path=/mnt/replication-tls-server-cert/ca.crt
            {{- end }}

            {{- if eq .Values.controller.role "secondary" }}
            - --replication-tls-server-cert-path=/mnt/replication-tls-server-cert/tls.crt
            - --replication-tls-server-key-path=/mnt/replication-tls-server-cert/tls.key
            - --replication-tls-client-ca-path=/mnt/replication-tls-client-cert/ca.crt
            - --webhook-cert-path=/mnt/webhook-tls-cert/tls.crt
            - --webhook-key-path=/mnt/webhook-tls-cert/tls.key
            {{- end }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IMAGE
              value: {{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
            {{- range .Values.controller.env }}
            - {{ toYaml . | nindent 14 }}
            {{- end }}
          ports:
            {{- toYaml .Values.controller.ports | nindent 12 }}
          volumeMounts:
            - name: ceph-config
              mountPath: /etc/ceph
            {{- if ne .Values.controller.role "standalone" }}
            - name: replication-tls-server-cert
              mountPath: /mnt/replication-tls-server-cert
            - name: replication-tls-client-cert
              mountPath: /mnt/replication-tls-client-cert
            {{- end }}
            {{- if eq .Values.controller.role "secondary" }}
            - name: webhook-tls-cert
              mountPath: /mnt/webhook-tls-cert
            {{- end }}
        - command:
            - /bin/bash
            - -c
            - |
              # Replicate the script from toolbox.sh inline so the ceph image
              # can be run directly, instead of requiring the rook toolbox
              CEPH_CONFIG="/etc/ceph/ceph.conf"
              MON_CONFIG="/etc/rook/mon-endpoints"
              KEYRING_FILE="/etc/ceph/keyring"

              # create a ceph config file in its default location so ceph/rados tools can be used
              # without specifying any arguments
              write_endpoints() {
                endpoints=$(cat ${MON_CONFIG})

                # filter out the mon names
                # external cluster can have numbers or hyphens in mon names, handling them in regex
                # shellcheck disable=SC2001
                mon_endpoints=$(echo "${endpoints}"| sed 's/[a-z0-9_-]\+=//g')

                DATE=$(date)
                echo "$DATE writing mon endpoints to ${CEPH_CONFIG}: ${endpoints}"
                  cat <<EOF > ${CEPH_CONFIG}
              [global]
              mon_host = ${mon_endpoints}

              [client.admin]
              keyring = ${KEYRING_FILE}
              EOF
              }

              # watch the endpoints config file and update if the mon endpoints ever change
              watch_endpoints() {
                # get the timestamp for the target of the soft link
                real_path=$(realpath ${MON_CONFIG})
                initial_time=$(stat -c %Z "${real_path}")
                while true; do
                  real_path=$(realpath ${MON_CONFIG})
                  latest_time=$(stat -c %Z "${real_path}")

                  if [[ "${latest_time}" != "${initial_time}" ]]; then
                    write_endpoints
                    initial_time=${latest_time}
                  fi

                  sleep 10
                done
              }

              # read the secret from an env var (for backward compatibility), or from the secret file
              ceph_secret=${ROOK_CEPH_SECRET}
              if [[ "$ceph_secret" == "" ]]; then
                ceph_secret=$(cat /var/lib/rook-ceph-mon/secret.keyring)
              fi

              # create the keyring file
              cat <<EOF > ${KEYRING_FILE}
              [${ROOK_CEPH_USERNAME}]
              key = ${ceph_secret}
              EOF

              # write the initial config file
              write_endpoints

              # continuously update the mon endpoints if they fail over
              watch_endpoints
          env:
          - name: ROOK_CEPH_USERNAME
            valueFrom:
              secretKeyRef:
                key: ceph-username
                name: rook-ceph-mon
          image: ghcr.io/cybozu/ceph:18.2.4.2
          imagePullPolicy: IfNotPresent
          name: toolbox
          securityContext:
            runAsGroup: 2016
            runAsNonRoot: true
            runAsUser: 2016
          volumeMounts:
          - mountPath: /etc/ceph
            name: ceph-config
          - mountPath: /etc/rook
            name: mon-endpoint-volume
          - name: ceph-admin-secret
            mountPath: /var/lib/rook-ceph-mon
            readOnly: true
      dnsPolicy: ClusterFirstWithHostNet
      volumes:
        - name: ceph-admin-secret
          secret:
            secretName: rook-ceph-mon
            optional: false
            items:
              - key: ceph-secret
                path: secret.keyring
        - configMap:
            items:
            - key: data
              path: mon-endpoints
            name: rook-ceph-mon-endpoints
          name: mon-endpoint-volume
        - emptyDir: {}
          name: ceph-config
        {{- if eq .Values.controller.role "primary" }}
        - name: replication-tls-server-cert
          configMap:
            name: {{ .Values.controller.mtls.serverCACertConfigMap }}
        - name: replication-tls-client-cert
          secret:
            secretName: {{ .Values.controller.mtls.clientTLSSecret }}
        {{- end }}
        {{- if eq .Values.controller.role "secondary" }}
        - name: replication-tls-server-cert
          secret:
            secretName: {{ .Values.controller.mtls.serverTLSSecret }}
        - name: replication-tls-client-cert
          configMap:
            name: {{ .Values.controller.mtls.clientCACertConfigMap }}
        - name: webhook-tls-cert
          secret:
            secretName: {{ template "mantle.fullname" . }}-webhook
        {{- end }}
      terminationGracePeriodSeconds: 10
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 5
        {{- toYaml . | nindent 8 }}
      {{- end }}
