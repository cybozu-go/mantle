apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: mantle
    app.kubernetes.io/part-of: mantle
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      securityContext:
        runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - command:
        - /manager
        args:
        - --leader-elect
        image: controller:latest
        imagePullPolicy: IfNotPresent
        name: manager
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        volumeMounts:
        - mountPath: /etc/ceph
          name: ceph-config
      - command:
          - /bin/bash
          - -c
          - |
            # Replicate the script from toolbox.sh inline so the ceph image
            # can be run directly, instead of requiring the rook toolbox
            CEPH_CONFIG="/etc/ceph/ceph.conf"
            MON_CONFIG="/etc/rook/mon-endpoints"
            KEYRING_FILE="/etc/ceph/keyring"

            # create a ceph config file in its default location so ceph/rados tools can be used
            # without specifying any arguments
            write_endpoints() {
              endpoints=$(cat ${MON_CONFIG})

              # filter out the mon names
              # external cluster can have numbers or hyphens in mon names, handling them in regex
              # shellcheck disable=SC2001
              mon_endpoints=$(echo "${endpoints}"| sed 's/[a-z0-9_-]\+=//g')

              DATE=$(date)
              echo "$DATE writing mon endpoints to ${CEPH_CONFIG}: ${endpoints}"
                cat <<EOF > ${CEPH_CONFIG}
            [global]
            mon_host = ${mon_endpoints}

            [client.admin]
            keyring = ${KEYRING_FILE}
            EOF
            }

            # watch the endpoints config file and update if the mon endpoints ever change
            watch_endpoints() {
              # get the timestamp for the target of the soft link
              real_path=$(realpath ${MON_CONFIG})
              initial_time=$(stat -c %Z "${real_path}")
              while true; do
                real_path=$(realpath ${MON_CONFIG})
                latest_time=$(stat -c %Z "${real_path}")

                if [[ "${latest_time}" != "${initial_time}" ]]; then
                  write_endpoints
                  initial_time=${latest_time}
                fi

                sleep 10
              done
            }

            # read the secret from an env var (for backward compatibility), or from the secret file
            ceph_secret=${ROOK_CEPH_SECRET}
            if [[ "$ceph_secret" == "" ]]; then
              ceph_secret=$(cat /var/lib/rook-ceph-mon/secret.keyring)
            fi

            # create the keyring file
            cat <<EOF > ${KEYRING_FILE}
            [${ROOK_CEPH_USERNAME}]
            key = ${ceph_secret}
            EOF

            # write the initial config file
            write_endpoints

            # continuously update the mon endpoints if they fail over
            watch_endpoints
        env:
        - name: ROOK_CEPH_USERNAME
          valueFrom:
            secretKeyRef:
              key: ceph-username
              name: rook-ceph-mon
        image: quay.io/ceph/ceph:v19.2.1
        imagePullPolicy: IfNotPresent
        name: toolbox
        securityContext:
          runAsGroup: 2016
          runAsNonRoot: true
          runAsUser: 2016
        volumeMounts:
        - mountPath: /etc/ceph
          name: ceph-config
        - mountPath: /etc/rook
          name: mon-endpoint-volume
        - name: ceph-admin-secret
          mountPath: /var/lib/rook-ceph-mon
          readOnly: true
      dnsPolicy: ClusterFirstWithHostNet
      tolerations:
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 5
      volumes:
      - name: ceph-admin-secret
        secret:
          secretName: rook-ceph-mon
          optional: false
          items:
            - key: ceph-secret
              path: secret.keyring
      - configMap:
          items:
          - key: data
            path: mon-endpoints
          name: rook-ceph-mon-endpoints
        name: mon-endpoint-volume
      - emptyDir: {}
        name: ceph-config
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
